// <auto-generated />
using System;
using Hos.ScheduleMaster.Core.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Hos.ScheduleMaster.Core.Migrations
{
    [DbContext(typeof(SmDbContext))]
    [Migration("20250412142159_addschedulegroup")]
    partial class addschedulegroup
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Hos.ScheduleMaster.Core.Models.ScheduleDelayedEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("ContentKey")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("contentkey");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("createtime");

                    b.Property<string>("CreateUserName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("createusername");

                    b.Property<DateTime>("DelayAbsoluteTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("delayabsolutetime");

                    b.Property<int>("DelayTimeSpan")
                        .HasColumnType("int")
                        .HasColumnName("delaytimespan");

                    b.Property<DateTime?>("ExecuteTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("executetime");

                    b.Property<int>("FailedRetrys")
                        .HasColumnType("int")
                        .HasColumnName("failedretrys");

                    b.Property<DateTime?>("FinishTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("finishtime");

                    b.Property<string>("NotifyBody")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("notifybody");

                    b.Property<string>("NotifyDataType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("notifydatatype");

                    b.Property<string>("NotifyUrl")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("notifyurl");

                    b.Property<string>("Remark")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("remark");

                    b.Property<string>("SourceApp")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("sourceapp");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.Property<string>("Topic")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("topic");

                    b.HasKey("Id");

                    b.HasIndex("ContentKey")
                        .HasDatabaseName("scheduledelayeds_contentkey_index");

                    b.HasIndex("CreateTime")
                        .HasDatabaseName("scheduledelayeds_createtime_index");

                    b.ToTable("scheduledelayeds");
                });

            modelBuilder.Entity("Hos.ScheduleMaster.Core.Models.ScheduleEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("AssemblyName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("assemblyname");

                    b.Property<string>("ClassName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("classname");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("createtime");

                    b.Property<int>("CreateUserId")
                        .HasColumnType("int")
                        .HasColumnName("createuserid");

                    b.Property<string>("CreateUserName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("createusername");

                    b.Property<string>("CronExpression")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("cronexpression");

                    b.Property<string>("CustomParamsJson")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("customparamsjson");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("enddate");

                    b.Property<DateTime?>("LastRunTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("lastruntime");

                    b.Property<int>("MetaType")
                        .HasColumnType("int")
                        .HasColumnName("metatype");

                    b.Property<DateTime?>("NextRunTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("nextruntime");

                    b.Property<string>("Remark")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("remark");

                    b.Property<bool>("RunLoop")
                        .HasColumnType("bit")
                        .HasColumnName("runloop");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("startdate");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("title");

                    b.Property<int>("TotalRunCount")
                        .HasColumnType("int")
                        .HasColumnName("totalruncount");

                    b.HasKey("Id");

                    b.ToTable("schedules");
                });

            modelBuilder.Entity("Hos.ScheduleMaster.Core.Models.ScheduleExecutorEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid>("ScheduleId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("scheduleid");

                    b.Property<string>("WorkerName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("workername");

                    b.HasKey("Id");

                    b.ToTable("scheduleexecutors");
                });

            modelBuilder.Entity("Hos.ScheduleMaster.Core.Models.ScheduleGroupEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("create_time");

                    b.Property<int>("CreateUserId")
                        .HasColumnType("int")
                        .HasColumnName("create_user_id");

                    b.Property<string>("CreateUserName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("create_user_name");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("description");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit")
                        .HasColumnName("is_enabled");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("schedule_groups");
                });

            modelBuilder.Entity("Hos.ScheduleMaster.Core.Models.ScheduleGroupRelationEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("create_time");

                    b.Property<int>("CreateUserId")
                        .HasColumnType("int")
                        .HasColumnName("create_user_id");

                    b.Property<string>("CreateUserName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("create_user_name");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("group_id");

                    b.Property<Guid>("ScheduleId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("schedule_id");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("ScheduleId");

                    b.ToTable("schedule_group_relations");
                });

            modelBuilder.Entity("Hos.ScheduleMaster.Core.Models.ScheduleHttpOptionEntity", b =>
                {
                    b.Property<Guid>("ScheduleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("scheduleid");

                    b.Property<string>("Body")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("body");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("contenttype");

                    b.Property<string>("Headers")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("headers");

                    b.Property<string>("Method")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("method");

                    b.Property<string>("RequestUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("requesturl");

                    b.HasKey("ScheduleId");

                    b.ToTable("schedulehttpoptions");
                });

            modelBuilder.Entity("Hos.ScheduleMaster.Core.Models.ScheduleKeeperEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid>("ScheduleId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("scheduleid");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("userid");

                    b.HasKey("Id");

                    b.ToTable("schedulekeepers");
                });

            modelBuilder.Entity("Hos.ScheduleMaster.Core.Models.ScheduleLockEntity", b =>
                {
                    b.Property<Guid>("ScheduleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("scheduleid");

                    b.Property<string>("LockedNode")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("lockednode");

                    b.Property<DateTime?>("LockedTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("lockedtime");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.HasKey("ScheduleId");

                    b.ToTable("schedulelocks");
                });

            modelBuilder.Entity("Hos.ScheduleMaster.Core.Models.ScheduleReferenceEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid>("ChildId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("childid");

                    b.Property<Guid>("ScheduleId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("scheduleid");

                    b.HasKey("Id");

                    b.ToTable("schedulereferences");
                });

            modelBuilder.Entity("Hos.ScheduleMaster.Core.Models.ScheduleTraceEntity", b =>
                {
                    b.Property<Guid>("TraceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("traceid");

                    b.Property<double>("ElapsedTime")
                        .HasColumnType("float")
                        .HasColumnName("elapsedtime");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("endtime");

                    b.Property<string>("Node")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("node");

                    b.Property<int>("Result")
                        .HasColumnType("int")
                        .HasColumnName("result");

                    b.Property<Guid>("ScheduleId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("scheduleid");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("starttime");

                    b.HasKey("TraceId");

                    b.HasIndex("Result")
                        .HasDatabaseName("scheduletraces_result_index");

                    b.HasIndex("ScheduleId")
                        .HasDatabaseName("scheduletraces_scheduleid_index");

                    b.HasIndex("StartTime")
                        .HasDatabaseName("scheduletraces_starttime_index");

                    b.ToTable("scheduletraces");
                });

            modelBuilder.Entity("Hos.ScheduleMaster.Core.Models.ServerNodeEntity", b =>
                {
                    b.Property<string>("NodeName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("nodename");

                    b.Property<string>("AccessProtocol")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("accessprotocol");

                    b.Property<string>("AccessSecret")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("accesssecret");

                    b.Property<string>("Host")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("host");

                    b.Property<DateTime?>("LastUpdateTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("lastupdatetime");

                    b.Property<string>("MachineName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("machinename");

                    b.Property<int>("MaxConcurrency")
                        .HasColumnType("int")
                        .HasColumnName("maxconcurrency");

                    b.Property<string>("NodeType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("nodetype");

                    b.Property<int>("Priority")
                        .HasColumnType("int")
                        .HasColumnName("priority");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.HasKey("NodeName");

                    b.ToTable("servernodes");
                });

            modelBuilder.Entity("Hos.ScheduleMaster.Core.Models.SystemConfigEntity", b =>
                {
                    b.Property<string>("Key")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("key");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("createtime");

                    b.Property<string>("Group")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("group");

                    b.Property<bool>("IsReuired")
                        .HasColumnType("bit")
                        .HasColumnName("isreuired");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("name");

                    b.Property<string>("Remark")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("remark");

                    b.Property<int>("Sort")
                        .HasColumnType("int")
                        .HasColumnName("sort");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("updatetime");

                    b.Property<string>("UpdateUserName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("updateusername");

                    b.Property<string>("Value")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("value");

                    b.HasKey("Key");

                    b.ToTable("systemconfigs");

                    b.HasData(
                        new
                        {
                            Key = "Email_SmtpServer",
                            CreateTime = new DateTime(2025, 4, 12, 22, 21, 59, 376, DateTimeKind.Local).AddTicks(2649),
                            Group = "邮件配置",
                            IsReuired = true,
                            Name = "邮件服务器",
                            Remark = "smtp服务器地址",
                            Sort = 1,
                            Value = ""
                        },
                        new
                        {
                            Key = "Email_SmtpPort",
                            CreateTime = new DateTime(2025, 4, 12, 22, 21, 59, 376, DateTimeKind.Local).AddTicks(2655),
                            Group = "邮件配置",
                            IsReuired = true,
                            Name = "邮件服务器端口",
                            Remark = "smtp端口号",
                            Sort = 2,
                            Value = ""
                        },
                        new
                        {
                            Key = "Email_FromAccount",
                            CreateTime = new DateTime(2025, 4, 12, 22, 21, 59, 376, DateTimeKind.Local).AddTicks(2656),
                            Group = "邮件配置",
                            IsReuired = true,
                            Name = "发件人账号",
                            Remark = "邮箱账号",
                            Sort = 3,
                            Value = ""
                        },
                        new
                        {
                            Key = "Email_FromAccountPwd",
                            CreateTime = new DateTime(2025, 4, 12, 22, 21, 59, 376, DateTimeKind.Local).AddTicks(2658),
                            Group = "邮件配置",
                            IsReuired = true,
                            Name = "发件人账号密码",
                            Remark = "登录密码或授权码等",
                            Sort = 4,
                            Value = ""
                        },
                        new
                        {
                            Key = "Assembly_ImagePullPolicy",
                            CreateTime = new DateTime(2025, 4, 12, 22, 21, 59, 376, DateTimeKind.Local).AddTicks(2660),
                            Group = "程序集配置",
                            IsReuired = true,
                            Name = "文件包拉取策略",
                            Remark = "Always-总是拉取，IfNotPresent-本地没有时拉取，默认是Always",
                            Sort = 1,
                            Value = "Always"
                        },
                        new
                        {
                            Key = "Http_RequestTimeout",
                            CreateTime = new DateTime(2025, 4, 12, 22, 21, 59, 376, DateTimeKind.Local).AddTicks(2661),
                            Group = "HTTP配置",
                            IsReuired = true,
                            Name = "请求超时时间",
                            Remark = "单位是秒，默认值是10",
                            Sort = 1,
                            Value = "10"
                        },
                        new
                        {
                            Key = "System_WorkerUnHealthTimes",
                            CreateTime = new DateTime(2025, 4, 12, 22, 21, 59, 376, DateTimeKind.Local).AddTicks(2662),
                            Group = "系统配置",
                            IsReuired = true,
                            Name = "Worker允许无响应次数",
                            Remark = "健康检查失败达到最大次数会被下线剔除，默认值是3",
                            Sort = 1,
                            Value = "3"
                        },
                        new
                        {
                            Key = "DelayTask_DelayPattern",
                            CreateTime = new DateTime(2025, 4, 12, 22, 21, 59, 376, DateTimeKind.Local).AddTicks(2663),
                            Group = "延时任务配置",
                            IsReuired = true,
                            Name = "延迟模式",
                            Remark = "Relative-相对时间，Absolute-绝对时间，默认值是Relative",
                            Sort = 1,
                            Value = "Relative"
                        },
                        new
                        {
                            Key = "DelayTask_RetryTimes",
                            CreateTime = new DateTime(2025, 4, 12, 22, 21, 59, 376, DateTimeKind.Local).AddTicks(2664),
                            Group = "延时任务配置",
                            IsReuired = true,
                            Name = "回调失败重试次数",
                            Remark = "回调失败重试次数，默认值是3",
                            Sort = 2,
                            Value = "3"
                        },
                        new
                        {
                            Key = "DelayTask_RetrySpans",
                            CreateTime = new DateTime(2025, 4, 12, 22, 21, 59, 376, DateTimeKind.Local).AddTicks(2665),
                            Group = "延时任务配置",
                            IsReuired = true,
                            Name = "回调失败重试间隔",
                            Remark = "回调失败重试间隔时间(s)，会随着重试次数递增，默认值是10秒",
                            Sort = 3,
                            Value = "10"
                        });
                });

            modelBuilder.Entity("Hos.ScheduleMaster.Core.Models.SystemLogEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Category")
                        .HasColumnType("int")
                        .HasColumnName("category");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("createtime");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("message");

                    b.Property<string>("Node")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("node");

                    b.Property<Guid?>("ScheduleId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("scheduleid");

                    b.Property<string>("StackTrace")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("stacktrace");

                    b.Property<Guid?>("TraceId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("traceid");

                    b.HasKey("Id");

                    b.HasIndex("CreateTime")
                        .HasDatabaseName("systemlogs_createtime_index");

                    b.HasIndex("TraceId")
                        .HasDatabaseName("systemlogs_traceid_index");

                    b.ToTable("systemlogs");
                });

            modelBuilder.Entity("Hos.ScheduleMaster.Core.Models.SystemUserEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("createtime");

                    b.Property<string>("Email")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("email");

                    b.Property<DateTime?>("LastLoginTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("lastlogintime");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("password");

                    b.Property<string>("Phone")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasColumnName("phone");

                    b.Property<string>("RealName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("realname");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("username");

                    b.HasKey("Id");

                    b.ToTable("systemusers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreateTime = new DateTime(2025, 4, 12, 22, 21, 59, 374, DateTimeKind.Local).AddTicks(9359),
                            Password = "96e79218965eb72c92a549dd5a330112",
                            RealName = "admin",
                            Status = 1,
                            UserName = "admin"
                        });
                });

            modelBuilder.Entity("Hos.ScheduleMaster.Core.Models.TraceStatisticsEntity", b =>
                {
                    b.Property<int>("DateNum")
                        .HasColumnType("int")
                        .HasColumnName("datenum");

                    b.Property<long>("DateStamp")
                        .HasColumnType("bigint")
                        .HasColumnName("datestamp");

                    b.Property<int>("Fail")
                        .HasColumnType("int")
                        .HasColumnName("fail");

                    b.Property<DateTime>("LastUpdateTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("lastupdatetime");

                    b.Property<int>("Other")
                        .HasColumnType("int")
                        .HasColumnName("other");

                    b.Property<int>("Success")
                        .HasColumnType("int")
                        .HasColumnName("success");

                    b.HasKey("DateNum");

                    b.ToTable("tracestatistics");
                });

            modelBuilder.Entity("Hos.ScheduleMaster.Core.Models.ScheduleGroupRelationEntity", b =>
                {
                    b.HasOne("Hos.ScheduleMaster.Core.Models.ScheduleGroupEntity", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hos.ScheduleMaster.Core.Models.ScheduleEntity", "Schedule")
                        .WithMany()
                        .HasForeignKey("ScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("Schedule");
                });
#pragma warning restore 612, 618
        }
    }
}
